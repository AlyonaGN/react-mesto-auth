{"ast":null,"code":"class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this.baseUrl = baseUrl;\n    this.headers = headers;\n  }\n\n  getUserData() {\n    return fetch(`${this.baseUrl}/users/me`, {\n      headers: this.headers\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n\n  createCard(serverCard) {\n    return {\n      src: serverCard.link,\n      alt: serverCard.name,\n      description: serverCard.name,\n      likes: serverCard.likes,\n      likesAmount: serverCard.likes.length,\n      id: serverCard._id,\n      ownerId: serverCard.owner._id\n    };\n  }\n\n  getInitialCards() {\n    return fetch(`${this.baseUrl}/cards`, {\n      headers: this.headers\n    }).then(res => {\n      console.log(res);\n\n      this._getResponseData(res).map(card => {\n        return this.createCard(card);\n      });\n    });\n  }\n\n  editProfile(formValues) {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: formValues['user-name'],\n        about: formValues['profile-description']\n      })\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n\n  addNewCard(pictureLink, pictureDescription) {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        link: pictureLink,\n        name: pictureDescription\n      })\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this.baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    if (!isLiked) {\n      return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n        method: 'PUT',\n        headers: this.headers\n      }).then(res => {\n        return this._getResponseData(res);\n      });\n    } else {\n      return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n        method: 'DELETE',\n        headers: this.headers\n      }).then(res => {\n        return this._getResponseData(res);\n      });\n    }\n  }\n\n  changeAvatar(avatarLink) {\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n\n  _getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error(`Ошибка: ${res.status}`));\n  }\n\n  loadAppInfo() {\n    return Promise.all([this.getInitialCards(), this.getUserData()]);\n  }\n\n}\n\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-14',\n  headers: {\n    authorization: '281eea5d-a9b0-4240-a494-1ec91d19957f',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["/Users/alyona/Docs/Praktikum-Projects/mesto-react/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","getUserData","fetch","then","res","_getResponseData","createCard","serverCard","src","link","alt","name","description","likes","likesAmount","length","id","_id","ownerId","owner","getInitialCards","console","log","map","card","editProfile","formValues","method","body","JSON","stringify","about","addNewCard","pictureLink","pictureDescription","deleteCard","cardId","changeLikeCardStatus","isLiked","changeAvatar","avatarLink","avatar","ok","json","Promise","reject","Error","status","loadAppInfo","all","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n    constructor({ baseUrl, headers }) {\n        this.baseUrl = baseUrl;\n        this.headers = headers;\n    }\n\n    getUserData() {\n        return fetch(`${this.baseUrl}/users/me`, {\n            headers: this.headers,\n        })\n            .then(res => {\n                return this._getResponseData(res);\n            });\n    }\n\n    createCard(serverCard) {\n        return {\n          src: serverCard.link,\n          alt: serverCard.name,\n          description: serverCard.name,\n          likes: serverCard.likes,\n          likesAmount: serverCard.likes.length,\n          id: serverCard._id,\n          ownerId: serverCard.owner._id,\n        }\n      }\n\n    getInitialCards() {\n        return fetch(`${this.baseUrl}/cards`, {\n            headers: this.headers,\n        })\n            .then(res => {\n                console.log(res);\n                this._getResponseData(res).map((card) => {\n                   return this.createCard(card);\n                });\n            });\n    }\n\n    editProfile(formValues) {\n        return fetch(`${this.baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: this.headers,\n            body: JSON.stringify({\n                name: formValues['user-name'],\n                about: formValues['profile-description']\n            })\n        })\n            .then(res => {\n                return this._getResponseData(res);\n            });\n    }\n\n    addNewCard(pictureLink, pictureDescription) {\n        return fetch(`${this.baseUrl}/cards`, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify({\n                link: pictureLink,\n                name: pictureDescription\n            })\n        })\n            .then(res => {\n                return this._getResponseData(res);\n            });\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this.baseUrl}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: this.headers,\n        })\n            .then(res => {\n                return this._getResponseData(res);\n            });\n    }\n\n    changeLikeCardStatus(cardId, isLiked) {\n        if (!isLiked) {\n            return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n                method: 'PUT',\n                headers: this.headers,\n            })\n                .then(res => {\n                    return this._getResponseData(res);\n                });\n        }\n        else {\n            return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n                method: 'DELETE',\n                headers: this.headers,\n            })\n                .then(res => {\n                    return this._getResponseData(res);\n                });\n        }\n    }\n\n    changeAvatar(avatarLink) {\n        return fetch(`${this.baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this.headers,\n            body: JSON.stringify({\n                avatar: avatarLink,\n            })\n        })\n            .then(res => {\n                return this._getResponseData(res);\n            });\n    }\n\n    _getResponseData(res){\n        if (res.ok) {\n            return res.json();\n        }\n\n        return Promise.reject(new Error(`Ошибка: ${res.status}`));\n    }\n\n    loadAppInfo() {\n        return Promise.all([this.getInitialCards(), this.getUserData()]);\n      }\n\n}\n\nexport const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-14',\n    headers: {\n        authorization: '281eea5d-a9b0-4240-a494-1ec91d19957f',\n        'Content-Type': 'application/json'\n    }\n});"]},"metadata":{},"sourceType":"module"}